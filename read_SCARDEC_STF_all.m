%% get information about the file names
FCTs=dir('./SCARDEC_original/FCTs_*');

N_pts=500;

All_STFs=zeros(length(FCTs),N_pts);
All_REs=zeros(length(FCTs),N_pts);
All_headers=zeros(length(FCTs),17);

T_trunc_all = zeros(length(FCTs),1);
total_RE_all = zeros(length(FCTs),1);
fc_all=zeros(length(FCTs),1); % corner frequency
n_all=zeros(length(FCTs),1); % falloff n
for ifcts=1:length(FCTs)
    
    if mod(ifcts,100)==0;
        disp(ifcts)
    end
    
    stf_file0=dir([FCTs(ifcts).folder '/' FCTs(ifcts).name '/fctmoysource_*']);
    stf_file=[stf_file0.folder '/' stf_file0.name];
    
    headers_temp=read_headers(stf_file);
    
    M0=headers_temp(10);
    [T0, STF0] = read_stfs(stf_file);
      
    % radiated energy function
    RE=(diff(STF0)./diff(T0)).^2;
    T_RE=T0(1:(end-1))+diff(T0)/2;
    
    RE0=interp1(T_RE,RE,T0);
    RE0(isnan(RE0))=0;
    
    
    % determine the trucation time
    percent = 0.999;
    T_trunc = truncation_time (T0,STF0,percent);
    T_trunc_all(ifcts)=T_trunc;
    
    
    % resample STF
    STF_temp=interp1(T0(T0<=T_trunc),STF0(T0<=T_trunc),linspace(T0(1),T_trunc,N_pts));
    RE_temp=interp1(T0(T0<=T_trunc),RE0(T0<=T_trunc),linspace(T0(1),T_trunc,N_pts));
    Time_temp=linspace(T0(1),T_trunc,N_pts);
    
    All_STFs(ifcts,:)=STF_temp;
    All_REs(ifcts,:)=RE_temp;
    All_headers(ifcts,:)=headers_temp;
    
    STF_temp(isnan(STF_temp))=0;
    RE_temp(isnan(RE_temp))=0;
    
    total_RE_all(ifcts)=trapz(Time_temp,RE_temp);
    
%     % getting corner frequency
%     [S,f,~,~] = FFT_seimograph(STF_temp,Time_temp(2)-Time_temp(1));
%     S=abs(S);
%     [fc_best,n_best]=one_fc_fitting(f(f<=0.5),S(f<=0.5),M0);
%     
%     figure(1)
%     loglog(f,S);
%     pause(0.1);
%     xlim([1e-2 1])
%     
%     fc_all(ifcts)=fc_best; % corner frequency
%     n_all(ifcts)=n_best;
    
end

All_STFs(isnan(All_STFs))=0;
All_REs(isnan(All_REs))=0;


%Designa is stress drop in MPa calculated based on Eshelby 1957, assuming that size (Brune 1970) 
A=load('prem_model.txt'); 
depth_prem=A(:,1);
Vs_prem=A(:,4);
Vp_prem=A(:,3);
Rho_prem=A(:,2);

k=0.32;
Depth=All_headers(:,9);
Vs=interp1(depth_prem,Vs_prem,Depth)*1e3;
Vp=interp1(depth_prem,Vp_prem,Depth)*1e3;
Rho=interp1(depth_prem,Rho_prem,Depth)*1e3;

% Scaled energy ER/M0
total_RE_all_scaled=(1/15/pi./Rho./Vp.^5 + 1/10/pi./Rho./Vs.^5).*total_RE_all./All_headers(:,10);

%Dsigma = 7/16*All_headers(:,10).*(1./T_trunc_all/k./Vs).^3/1e6; 
% stress drop estimated directly from STF is of great uncertainty
Dsigma = 4; % use the results from Allmann and Shearer 2009

Shear_modulus=Vs.^2.*Rho;

radiation_efficiency=2*Shear_modulus.*total_RE_all_scaled./Dsigma/1e6;
    
save('All_stfs_500.mat');

%%
Mw = All_headers(:,11);
II_large = find (Mw >7.5);

Mw_large=Mw(II_large);


STF_large=All_STFs(II_large,:);

[~,I_sort]=sort(Mw_large,'ascend');
STF_large = STF_large(I_sort,:);


NN=ceil(sqrt(length(II_large)));

ff=figure(1);
ff.Visible='off';
for ii=1:length(II_large)

    
    [IR,IC] = ind2sub([NN NN],ii);
    shift_R=1.2*N_pts*(IC-1);
    shift_C=1.2*(IR-1);

    CC=[1 0 0];
    STF_sub=STF_large(ii,:)/max(STF_large(ii,:));

    hold on
    plot([1:N_pts]+shift_R,STF_sub+shift_C,'-','LineWidth',1.5,'Color',[0 0 0.6 0.8])
end

set(gca,'Visible','off')

ff.Position=[50 50 900 608];
ff.PaperSize=ff.Position(3:4);

%keyboard

figure(1)
print('-dpdf','SCARDEC_Large_Mw_7.5_500.pdf')

%%
function T_trunc = truncation_time (T0,STF0,percent)
 % get the trucation time based on certain percent of total moment and
 % radiated energy
 
 % T_trunc = truncation_time (T0,STF0,percent)
 
 
 % getting RE 
 RE=(diff(STF0)./diff(T0)).^2;
 T_RE=T0(1:(end-1))+diff(T0)/2;
 
 RE0=interp1(T_RE,RE,T0);
 RE0(isnan(RE0))=0;
 
 total_RE=cumtrapz(T0,RE0);
 
 I_T_RE=find(total_RE<=percent*total_RE(end));
 T_RE_trunc=T0(I_T_RE(end)); % truncation time of radiated energy
 
 
% getting STF
 total_STF=cumtrapz(T0,STF0);
 
 I_T_STF=find(total_STF<=percent*total_STF(end));
 T_STF_trunc=T0(I_T_STF(end)); % truncation time of radiated energy

 
 T_trunc = (T_RE_trunc+T_STF_trunc)/2;

end




function headers = read_headers(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   FCTMOYSOURCE20161018163641SOUTHOFFIJIISLANDS = IMPORTFILE(FILENAME)
%   Reads data from text file FILENAME for the default selection.
%
%   FCTMOYSOURCE20161018163641SOUTHOFFIJIISLANDS = IMPORTFILE(FILENAME,
%   STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text
%   file FILENAME.
%
% Example:
%   fctmoysource20161018163641SOUTHOFFIJIISLANDS = importfile('fctmoysource_20161018_163641_SOUTH_OF_FIJI_ISLANDS', 1, 2);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/09/04 21:18:41

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 1;
    endRow = 2;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
headers0 = [dataArray{1:end-1}];
headers = zeros(1,17);
headers(1:8)=headers0(1,1:8);
headers(9:17)=headers0(2,:);
end


function [T,STF] = read_stfs(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   FCTMOYSOURCE20161018163641SOUTHOFFIJIISLANDS = IMPORTFILE(FILENAME)
%   Reads data from text file FILENAME for the default selection.
%
%   FCTMOYSOURCE20161018163641SOUTHOFFIJIISLANDS = IMPORTFILE(FILENAME,
%   STARTROW, ENDROW) Reads data from rows STARTROW through ENDROW of text
%   file FILENAME.
%
% Example:
%   fctmoysource20161018163641SOUTHOFFIJIISLANDS = importfile('fctmoysource_20161018_163641_SOUTH_OF_FIJI_ISLANDS', 3, 56);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2019/09/04 21:21:48

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
tempMat = [dataArray{1:end-1}];

T=tempMat(:,1);
STF=tempMat(:,2);

end



